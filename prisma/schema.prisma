generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model BillingAddress {
  id            String  @id
  streetAddress String
  unit          String?
  city          String
  state         String
  postalCode    String
  companyId     String  @unique
  Company       Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Cart {
  id          String        @id
  userId      String        @unique
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  UnitsOnCart UnitsOnCart[]
}

model Company {
  id                  String           @id
  name                String
  userId              String           @unique
  accountPayableEmail String
  paymentMethod       String
  BillingAddress      BillingAddress?
  User                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  ShippingAddress     ShippingAddress?
}

model Contact {
  id          String  @id
  name        String
  position    String?
  phoneNumber String
  userId      String  @unique
  User        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        String   @id
  juiceId   String
  userId    String
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [juiceId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, juiceId])
}

model Order {
  id            String          @id
  createdAt     DateTime        @default(now())
  userId        String
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderLineItem OrderLineItem[]
}

model OrderLineItem {
  id       String @id
  orderId  String
  unitId   String
  quantity Int
  Order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Unit     Unit   @relation(fields: [unitId], references: [id])
}

model Product {
  id       String     @id
  name     String
  category String
  Favorite Favorite[]
  Unit     Unit[]
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id                   String  @id
  streetAddress        String
  unit                 String?
  city                 String
  state                String
  postalCode           String
  deliveryInstructions String?
  companyId            String  @unique
  Company              Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Unit {
  id            String          @id
  price         Float
  code          String
  productId     String
  size          String
  OrderLineItem OrderLineItem[]
  Product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  UnitsOnCart   UnitsOnCart?
}

model UnitsOnCart {
  cartId    String
  unitId    String   @unique
  quantity  Int
  createdAt DateTime @default(now())
  Cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Unit      Unit     @relation(fields: [unitId], references: [id])

  @@id([cartId, unitId])
}

model User {
  id                String             @id
  email             String             @unique
  emailVerified     DateTime?
  image             String?
  isApproved        Boolean            @default(false)
  password          String
  Account           Account[]
  Cart              Cart?
  Company           Company?
  Contact           Contact?
  Favorite          Favorite[]
  Order             Order[]
  Session           Session[]
  VerificationToken VerificationToken?
}

model VerificationToken {
  identifier String   @unique
  token      String   @unique
  expires    DateTime
  userId     String   @unique
  valid      Boolean  @default(true)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
